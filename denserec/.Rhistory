data("liver.toxicity")
str(liver.toxicity)
data$gene
dat=liver.toxicity$gene
str(dat)
summary(gene)
summary(dat)
scale(dat)
sapply(scale(gene),mean)
sapply(scale(dat),mean)
prc=prcomp(scale(dat))
prc
prc$sdev
barchart(cumsum(prc$sdev^2)/sum(prc$sdev^2))
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2))
bar(cumsum(prc$sdev^2)/sum(prc$sdev^2))
boxplot(cumsum(prc$sdev^2)/sum(prc$sdev^2))
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l')
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l',color=4)
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l',lty='o')
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l',lty=8)
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l',lty=6)
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l',lty=4)
plot(cumsum(prc$sdev^2)/sum(prc$sdev^2),type='l',lty=2)
prc$x
prc$x[1:2]
prc$x[,1:2]
sdat=prc$x[,1:2]
ssdat
km=kmeans(sdat)
km=kmeans(sdat,cecenters = )
km=kmeans(sdat,centers = 3)
plot(sdat,color=km$cluster)
plot(sdat,col=km$cluster)
plot(sdat,col=km$cluster+2)
plot(sdat,col=km$cluster+1)
km=kmeans(sdat,centers = 4)
plot(sdat,col=km$cluster+1)
summary(str(liver.toxicity))
pca
km2=kmeans(dat,centers=4)
gmodels::CrossTable(km$cluster,km2$cluster)
library(devtools)
install_github('fawda123/ggord')
library(ggord)
install.packages('devtool')
knmi<read.csv('knmi.csv',header=T,stringsAsFactors = T)
knmi<-read.csv('knmi.csv',header=T,stringsAsFactors = T)
head(knmi)
View(knmi)
library(dplyr)
library(magrittr)
knmi %<>% mutate(DATE=as.Date(YYYYMMDD))
knmi= mutate(knmi,DATE=as.Date(YYYYMMDD))
knmi= mutate(knmi,DATE=as.Date(knmi$YYYYMMDD))
as.Date(20140701)
knmi$YYYYMMDD=as.character(knmi$YYYYMMDD)
knmi= mutate(knmi,DATE=as.Date(knmi$YYYYMMDD))
as.Date('20140701')
as.Date('20140701'
)
?as.Date
as.Date('20140701',format='%Y%m%d')
knmi= mutate(knmi,DATE=as.Date(knmi$YYYYMMDD,format='%Y%m%d'))
library(ggplot2)
g=ggplot(knmi,aes(x=DATE,y=TG))+geom_point(aes(color=TG))
g
g=ggplot(knmi,aes(x=DATE,y=TG))+geom_point(aes(color=TG*2))
g
g=g+ylab('Average Temperature')
g
g=ggplot(knmi,aes(x=DATE,y=TG))+geom_point(aes(color=TG*2))+stat_smooth(color='red')
g
g=ggplot(knmi,aes(x=DATE,y=TG))+geom_point(aes(color=DDVEC))+stat_smooth(color='red')
g
g=g+ylab('Average Temperature')
g=g+title('Netherland temperature in the past year')
g=g+ggtitle('Netherland temperature in the past year')
g
g=ggplot(knmi,aes(x=DATE,y=TG))+geom_point(aes(color=TG/10))+stat_smooth(color='red')
g=g+ggtitle('Netherland temperature in the past year')
g=g+ylab('Average Temperature')
g
as.Date('2012-1-2')>as.Date('2012-1-1')
summary(knmi$DATE)
dd=as.Date('2012-1-2')
dd
month(dd)
str(dd)
?Date
months(dd)
knmi=mutate(knmi,MONTH=as.factor(months(DATE)))
h=ggplot(knmi,aes(x=DATE,color=MONTH))+geom_density()+ ggtitle ("Holland Temperature distribution by season") +
xlab("Average temperature ( ºF )") +  ylab ("Probability")
g
h
h=ggplot(knmi,aes(x=TG,color=MONTH))+geom_density()+ ggtitle ("Holland Temperature distribution by season") +
xlab("Average temperature ( ºF )") +  ylab ("Probability")
h
h=h+scale_x_continuous(breaks=seq(-50,300,50))
h
levels(knmi$MONTH)
h
levels(knmi$MONTH)=c("一月" , "二月" ,"三月" , "四月", "五月" ,"六月","七月", "八月","九月","十月","十一月","十二月")
h
levels(knmi$MONTH)
h=ggplot(knmi,aes(x=TG,color=MONTH))+geom_density()+ ggtitle ("Holland Temperature distribution by season") +
xlab("Average temperature ( ºF )") +  ylab ("Probability")
h=h+scale_x_continuous(breaks=seq(-50,300,50))
h
?case
?switch
as.numeric(levels(knmi$MONTH))
levels(knmi$MONTH)
install_github('fawda123/ggord'
)
install.packages('ggord')
install.packages('maptools')
h=ggplot(knmi,aes(x=TG,color=MONTH))+geom_density()+ ggtitle ("Holland Temperature distribution by month") +
xlab("Average temperature ( ºF )") +  ylab ("Probability")
h=h+scale_x_continuous(breaks=seq(-50,300,50))
h
read.csv('american_presidents.csv')
pres<-read.csv('american_presidents.csv')
head(pres)
mean(pres$height_cm)
library(ggplot2)
ggplot2(pres,aes(x=height_cm))+geom_density()
ggplot(pres,aes(x=height_cm))+geom_density()
ggplot(pres,aes(x=height_cm))+geom_density()+geom_histogram()
ggplot(pres,aes(x=height_cm))+geom_density()+geom_histogram(binwidth=30)
ggplot(pres,aes(x=height_cm))+geom_density()+geom_histogram(binwidth=10)
ggplot(pres,aes(x=height_cm))+geom_density()+geom_histogram(binwidth=4)
ggplot(pres,aes(x=height_cm))+geom_density()+geom_histogram(binwidth=3)
ggplot(pres,aes(x=height_cm))+geom_density()+geom_histogram(binwidth=2)
ggplot(pres,aes(x=height_cm))+geom_density()+geom_bar(stat='bin')
head(pres)
ggplot(pres,aes(x=order,y=height_cm))+geom_point()
ggplot(pres,aes(x=order,y=height_cm))+geom_point()+geom_smooth()
ggplot(pres,aes(x=order,y=height_cm))+geom_point()+geom_smooth(method='lm')
install.packages('MazamaSpatialUtils')
library(MazamaSpatialUtils)
library(sp)
setSpatialDataDir('~/SpatialData')
convertTMWorldBorders()
loadSpatialData('TMWorldBorders')
ebolaCountries<-subset(TMWorldBorders,countryName %in% c('Liberia','Sierra Leone','Guinea'))
countryCodes<-ebolaCountries@data$countryCode
plot(ebolaCountries,lwd=3)
convertGADM(countryCode=countryCodes[1],admLevel = 2)
library(rvest)
TMWorldBorders$CountryName
TMWorldBorders$countryName
china<-subset(TMWorldBorders,countryName=='China')
countryCodes<-china@data$countryCode
plot(china,lwd=3)
install.packages('mapdata')
install.packages('maps')
install.packages('googleVis')
provname=c("CN-11","CN-12","CN-13","CN-14","CN-15",
"CN-21","CN-22","CN-23","CN-31","CN-32",
"CN-33","CN-34","CN-35","CN-36","CN-37",
"CN-41","CN-42","CN-43","CN-44","CN-45",
"CN-46","CN-50","CN-51","CN-52","CN-53",
"CN-54","CN-61","CN-62","CN-63","CN-64","CN-65");
pop=c(110.56,112.51,113.43,112.52,108.45,112.83,111.23,109.71,110.64,116.51,
113.86,127.85,117.93,114.74,112.17,118.46,128.18,126.16,130.30,
125.55,135.64,115.13,116.01,107.03,108.71,102.73,122.10,114.82,
110.35,108.79,106.12)
##
library(googleVis)
a<-data.frame(provname,pop)
G2 <- gvisGeoChart(a, locationvar='provname', colorvar='pop',options=list(region='CN',displayMode="regions",resolution="provinces",colorAxis="{colors: ['yellow','red']}" ))
plot(G2)
provname=c("CN-11","CN-12","CN-13","CN-14","CN-15",
"CN-21","CN-22","CN-23","CN-31","CN-32",
"CN-33","CN-34","CN-35","CN-36","CN-37",
"CN-41","CN-42","CN-43","CN-44","CN-45",
"CN-46","CN-50","CN-51","CN-52","CN-53",
"CN-54","CN-61","CN-62","CN-63","CN-64","CN-65");
pop=c(110.56,112.51,113.43,112.52,108.45,112.83,111.23,109.71,110.64,116.51,
113.86,127.85,117.93,114.74,112.17,118.46,128.18,126.16,130.30,
125.55,135.64,115.13,116.01,107.03,108.71,102.73,122.10,114.82,
110.35,108.79,106.12)
library(googleVis)
install.packages('googleVis')
library(googleVis)
a<-data.frame(provname,pop)
G2 <- gvisGeoChart(a, locationvar='provname', colorvar='pop',options=list(region='CN',displayMode="regions",resolution="provinces",colorAxis="{colors: ['yellow','red']}" ))
plot(G2)
install.packages(gpclib)
install.packages('gpclib')
china_map<-data.frame(map('world','China',plot=F)[c('x','y')]
s
china_map<-data.frame(map('world','China',plot=F))[c('x','y')]
library(maps)
library(mapdata)
china_map<-data.frame(map('world','China',plot=F))[c('x','y')]
canadamap <- data.frame(map("world", "Canada", plot = FALSE)[c("x", "y")])
chinamap <- data.frame(map("world", "China", plot = FALSE)[c("x", "y")])
ggplot(chinamap)+theme_bw(base_Size=22)+geom_path(data = chinamap, aes(x, y), colour = "black", fill = "white")
ggplot(chinamap)+theme_bw(base_size=22)+geom_path(data = chinamap, aes(x, y), colour = "black", fill = "white")
View(chinamap)
library(ggplot2)
library(reshape)
countries = read.csv('Data/WDI_GDF_Country.csv', strip.white=TRUE)
worldData = read.csv('Data/WDI_GDF_Data.csv', strip.white=TRUE)
worldData2 = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SE.XPD.TOTL.GD.ZS', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2008')]
worldData2 = merge(worldData2, countries[,c('Country.Code', 'Region')], by='Country.Code')
worldData2 = worldData2[which(worldData2$Region != 'Aggregates'),]
worldData2$Series.Name = as.factor(as.character(worldData2$Series.Name))
worldData2$Region = as.factor(as.character(worldData2$Region))
worldData3 = cast(worldData2, Country.Name + Region ~ Series.Name, mean, value='X2008')
names(worldData3) = c('Country', 'Region', 'GDP', 'Life.Expectancy', 'Population', 'Education')
worldData3$GDP.log = log(worldData3$GDP)
worldData3$GDP = worldData3$GDP / 1000000000 #Billions
worldData3$Population = worldData3$Population / 1000000 #Millions
p = ggplot(worldData3, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
p = ggplot(worldData3, aes(x=GDP.log, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (log scale)') + ylab('Life Expectancy at birth (years)')
worldData4 = worldData3[which(worldData3$GDP &lt; 2000),]
p = ggplot(worldData4, aes(x=GDP, y=Life.Expectancy, label=Country))
p + geom_point(aes(size=Population, colour=Region), stat='identity', alpha=.6) + geom_text(hjust=-.2, vjust=.5, size=2) + scale_size_continuous('Population (Millions)', to=c(1,20)) + xlab('Gross Domestic Product (billions)') + ylab('Life Expectancy at birth (years)')
gworldData = worldData[which(worldData$Series.Code %in% c('NY.GDP.MKTP.KD', 'SP.DYN.LE00.IN', 'SP.POP.TOTL')), c('Series.Code', 'Series.Name', 'Country.Name', 'Country.Code', 'X2000', 'X2001', 'X2002', 'X2003', 'X2004', 'X2005', 'X2006', 'X2007', 'X2008')]
gworldData = merge(gworldData, countries[,c('Country.Code', 'Region')], by='Country.Code')
gworldData = gworldData[which(gworldData$Region != 'Aggregates'),]
gworldData$Series.Name = as.factor(as.character(gworldData$Series.Name))
gworldData$Region = as.factor(as.character(gworldData$Region))
gworldData = melt(gworldData, id=c('Country.Code', 'Series.Code', 'Series.Name', 'Country.Name', 'Region'))
gworldData = cast(gworldData, Country.Name + Region + variable ~ Series.Name, mean, value='value')
names(gworldData) = c('Country', 'Region', 'Year', 'GDP', 'Life.Expectancy', 'Population')
gworldData$GDP = gworldData$GDP / 1000000000 #Billions
gworldData$Population = gworldData$Population / 1000000 #Millions
gworldData$Year = as.integer(substr(gworldData$Year, 2,5))
head(gworldData)
m = gvisMotionChart(gworldData, idvar='Country', timevar='Year')
cat(m$html$chart)
plot(m)
library(ggplot2)
library(reshape)
countries = read.csv('Data/WDI_GDF_Country.csv', strip.white=TRUE)
??ggave
library(RSNNS)
library(NeuralNetTools)
setwd('digit/')
d<-read.csv('train.csv')
d<-d[sample(nrow(d)),]
s<-splitForTrainingAndTest(d[,-1],d[,1],ratio = 0.85)
#nn<-mlp(s$inputsTrain,s$targetsTrain,size=1000)
rf<-randomForest::randomForest(s$inputsTrain,s$targetsTrain)
pred<-predict(rf,s$inputsTest)
pred=round(pred)
sum(pred==s$targetsTest)/length(pred)
A=read.array('xugpa.txt',k=77,m=3,n=1)
setwd('c:/rec/denserec/')
comparison<-read.csv('comparison.csv')
library(shapes)
A=read.array('xugpa.txt',k=77,m=3,n=1)
xa=A[,1,1]
ya=A[,2,1]
za=A[,3,1]
g=list()
g[[1]]=c(1:16,1)
g[[2]]=c(17:22,17)
g[[3]]=c(23:28,23)
g[[4]]=c(31:38,31)
g[[5]]=c(41:48,41)
g[[6]]=c(60:66,73:77,60)
g[[7]]=c(67:72,67)
g[[8]]=c(49,55,56,57,58,59,51,49)
g[[9]]=c(50,54,53,52,50,53)
open3d()
plot3d(xa,ya,za,type='p')
#text3d(x0,y0,pred,texts=0:76,color=2:78)
for(k in 1:9) {
lines3d(xa[g[[k]]],ya[g[[k]]],za[g[[k]]])
}
ll=c(932,817,1133,1384,929,1389,622,625,113,619,343,1,116,160,272,972,1083,911,912,1094,1002,819,3,95,96,304,197,214,1020,1500,1503,1504,1505,1293,1211,1242,1282,10000,10000,741,744,745,746,524,630,466,513,756,611,1515,1371,283,604,91,90,174,906,907,1215,1520,1028,225,224,761,436,798,801,1557,1244,478,468,779,231,228,1033,1538)
library(rgl)
setwd('c:/rec/denserec/')
TrainSparse=read.csv('TrainDataSparseMorphoSim.csv')
TrainDense=read.csv('TrainDataDenseMorphoSim.csv')
X=TrainSparse[,-1]
Y=TrainDense[,-1]
test=read.csv('xu773d.csv')[,-1]
#test=read.csv('test1.csv')[,-1]
#test=Y[2,]
prX=prcomp(X)
#od=prX$x%*%t(prX$rotation)+prX$center
prY=prcomp(Y)
pcX=prX$x[,1:5]
pcY=prY$x[,1:5]
pcx=as.matrix(pcX)
pcy=as.matrix(pcY)
l=solve(t(pcx)%*%pcx) %*% t(pcx) %*% pcy
pctest=matrix(predict(prX,test)[1:5],nrow=1)
pctesty=pctest%*% l
eigY=t(prY$rotation)
#Using only the first 3 PC's, adding the 4th PC would be horrible
#tune here
predict=matrix(c(pctesty[1:3],-2,-0.1932,0),nrow=1,ncol=6) %*% eigY+prY$center
pred=predict
x=pred[(0:1575*3+1)]
y=pred[(0:1575*3+2)]
z=pred[(0:1575*3+3)]
open3d()
plot3d(x,y,z,type='p')
aspect3d(0.76,1,0.8)
title3d('xu')
face=read.csv('face.csv',header=F)
nfaces=nrow(face)
for(k in 1:nfaces) {
f=face[k,]
#omitting NA values
f=f[is.na(f)==F]
#making a cyclic array of polygon vertices
f=c(f,f[1])
lines3d(x[f],y[f],z[f],color='blue')
}
#browseURL(paste("file://", writeWebGL(dir=file.path("C:/rec/", "test1"), width=700), sep=""))
v=rep('v',1576)
savedata=data.frame(v,x,y,z)
write.table(savedata,'testpca3.txt',sep = ' ',row.names = F,quote = F)
ll=c(932,817,1133,1384,929,1389,622,625,113,619,343,1,116,160,272,972,1083,911,912,1094,1002,819,3,95,96,304,197,214,1020,1500,1503,1504,1505,1293,1211,1242,1282,10000,10000,741,744,745,746,524,630,466,513,756,611,1515,1371,283,604,91,90,174,906,907,1215,1520,1028,225,224,761,436,798,801,1557,1244,478,468,779,231,228,1033,1538)
comparison=c(x[ll[1]],y[ll[1]],z[ll[1]])
for(k in 2:77) comparison=c(comparison,x[ll[k]],y[ll[k]],z[ll[k]])
comparison=rbind(test,comparison)
rownames(comparison)=c('original','computed')
write.csv(comparison,'comparison.csv')
comparison
ll=c(932,817,1133,1384,929,1389,622,625,113,619,343,1,116,160,272,972,1083,911,912,1094,1002,819,3,95,96,304,197,214,1020,1500,1503,1504,1505,1293,1211,1242,1282,10000,10000,741,744,745,746,524,630,466,513,756,611,1515,1371,283,604,91,90,174,906,907,1215,1520,1028,225,224,761,436,798,801,1557,1244,478,468,779,231,228,1033,1538)
comparison=c(x[ll[1]],y[ll[1]],z[ll[1]])
comparison
for(k in 2:77) comparison=c(comparison,x[ll[k]],y[ll[k]],z[ll[k]])
comparison
x[158]
ll[77]
length(ll)
ll=c(932,817,1133,1384,929,1389,622,625,113,619,343,1,116,160,272,972,1083,911,912,1094,1002,819,3,293,95,96,304,197,214,1020,1500,1503,1504,1505,1293,1211,1242,1282,3,4,741,744,745,746,524,630,466,513,756,611,1515,1371,283,604,91,90,174,906,907,1215,1520,1028,225,224,761,436,798,801,1557,1244,478,468,779,231,228,1033,1538)
comparison=c(x[ll[1]],y[ll[1]],z[ll[1]])
for(k in 2:77) comparison=c(comparison,x[ll[k]],y[ll[k]],z[ll[k]])
comparison=rbind(test,comparison)
rownames(comparison)=c('original','computed')
write.csv(comparison,'comparison.csv')
comparison
A=read.array('comparison.txt',k=77,m=3,n=2)
A=read.array('comparison.txt',k=77,m=3,n=2)
A=read.array('comparison.txt',k=77,m=3,n=2)
A=read.in('comparison.txt,k=77*2,m=3')
A=read.in('comparison.txt',k=77*2,m=3)
?scan
?read.array
A=read.array('comparison2.txt',k=77,m=3,n=1)
xa=A[,1,1]
ya=A[,2,1]
za=A[,3,1]
g=list()
g[[1]]=c(1:16,1)
g[[2]]=c(17:22,17)
g[[3]]=c(23:28,23)
g[[4]]=c(31:38,31)
g[[5]]=c(41:48,41)
g[[6]]=c(60:66,73:77,60)
g[[7]]=c(67:72,67)
g[[8]]=c(49,55,56,57,58,59,51,49)
g[[9]]=c(50,54,53,52,50,53)
open3d()
plot3d(xa,ya,za,type='p')
#text3d(x0,y0,pred,texts=0:76,color=2:78)
for(k in 1:9) {
lines3d(xa[g[[k]]],ya[g[[k]]],za[g[[k]]])
}
setwd('c:/rec/denserec/')
library(shapes)
A=read.array('xugpa.txt',k=77,m=3,n=1)
xa=A[,1,1]
ya=A[,2,1]
za=A[,3,1]
g=list()
g[[1]]=c(1:16,1)
g[[2]]=c(17:22,17)
g[[3]]=c(23:28,23)
g[[4]]=c(31:38,31)
g[[5]]=c(41:48,41)
g[[6]]=c(60:66,73:77,60)
g[[7]]=c(67:72,67)
g[[8]]=c(49,55,56,57,58,59,51,49)
g[[9]]=c(50,54,53,52,50,53)
open3d()
plot3d(xa,ya,za,type='p')
#text3d(x0,y0,pred,texts=0:76,color=2:78)
for(k in 1:9) {
lines3d(xa[g[[k]]],ya[g[[k]]],za[g[[k]]])
}
rgl::plot3d(A[,,1])
rgl::plot3d(A[,,1])
#text3d(x0,y0,pred,texts=0:76,color=2:78)
setwd('c:/rec/denserec/')
library(shapes)
A=read.array('xugpa.txt',k=77,m=3,n=1)
xa=A[,1,1]
ya=A[,2,1]
za=A[,3,1]
g=list()
g[[1]]=c(1:16,1)
g[[2]]=c(17:22,17)
g[[3]]=c(23:28,23)
g[[4]]=c(31:38,31)
g[[5]]=c(41:48,41)
g[[6]]=c(60:66,73:77,60)
g[[7]]=c(67:72,67)
g[[8]]=c(49,55,56,57,58,59,51,49)
g[[9]]=c(50,54,53,52,50,53)
open3d()
plot3d(xa,ya,za,type='p')
#text3d(x0,y0,pred,texts=0:76,color=2:78)
for(k in 1:9) {
lines3d(xa[g[[k]]],ya[g[[k]]],za[g[[k]]])
}
setwd('c:/rec/denserec/')
library(shapes)
A=read.array('comparison2.txt',k=77,m=3,n=1)
xa=A[,1,1]
ya=A[,2,1]
za=A[,3,1]
g=list()
g[[1]]=c(1:16,1)
g[[2]]=c(17:22,17)
g[[3]]=c(23:28,23)
g[[4]]=c(31:38,31)
g[[5]]=c(41:48,41)
g[[6]]=c(60:66,73:77,60)
g[[7]]=c(67:72,67)
g[[8]]=c(49,55,56,57,58,59,51,49)
g[[9]]=c(50,54,53,52,50,53)
open3d()
plot3d(xa,ya,za,type='p')
#text3d(x0,y0,pred,texts=0:76,color=2:78)
for(k in 1:9) {
lines3d(xa[g[[k]]],ya[g[[k]]],za[g[[k]]])
}
rgl::plot3d(A[,,1])
plot3d(pred)
library(rgl)
setwd('c:/rec/denserec/')
TrainSparse=read.csv('TrainDataSparseMorphoSim.csv')
TrainDense=read.csv('TrainDataDenseMorphoSim.csv')
X=TrainSparse[,-1]
Y=TrainDense[,-1]
test=read.csv('xu773d.csv')[,-1]
#test=read.csv('test1.csv')[,-1]
#test=Y[2,]
prX=prcomp(X)
#od=prX$x%*%t(prX$rotation)+prX$center
prY=prcomp(Y)
pcX=prX$x[,1:5]
pcY=prY$x[,1:5]
pcx=as.matrix(pcX)
pcy=as.matrix(pcY)
l=solve(t(pcx)%*%pcx) %*% t(pcx) %*% pcy
pctest=matrix(predict(prX,test)[1:5],nrow=1)
pctesty=pctest%*% l
eigY=t(prY$rotation)
#Using only the first 3 PC's, adding the 4th PC would be horrible
#tune here
predict=matrix(c(pctesty[1:3],-2,-0.1932,0),nrow=1,ncol=6) %*% eigY+prY$center
pred=predict
x=pred[(0:1575*3+1)]
y=pred[(0:1575*3+2)]
z=pred[(0:1575*3+3)]
open3d()
plot3d(x,y,z,type='p')
aspect3d(0.76,1,0.8)
title3d('xu')
face=read.csv('face.csv',header=F)
nfaces=nrow(face)
for(k in 1:nfaces) {
f=face[k,]
#omitting NA values
f=f[is.na(f)==F]
#making a cyclic array of polygon vertices
f=c(f,f[1])
lines3d(x[f],y[f],z[f],color='blue')
}
#browseURL(paste("file://", writeWebGL(dir=file.path("C:/rec/", "test1"), width=700), sep=""))
v=rep('v',1576)
savedata=data.frame(v,x,y,z)
write.table(savedata,'testpca3.txt',sep = ' ',row.names = F,quote = F)
pctesty
setwd('c:/rec/denserec/')
library(shapes)
A=read.array('comparison2.txt',k=77,m=3,n=1)
xa=A[,1,1]
ya=A[,2,1]
za=A[,3,1]
g=list()
g[[1]]=c(1:16,1)
g[[2]]=c(17:22,17)
g[[3]]=c(23:28,23)
g[[4]]=c(31:38,31)
g[[5]]=c(41:48,41)
g[[6]]=c(60:66,73:77,60)
g[[7]]=c(67:72,67)
g[[8]]=c(49,55,56,57,58,59,51,49)
g[[9]]=c(50,54,53,52,50,53)
open3d()
plot3d(xa,ya,za,type='p')
#text3d(x0,y0,pred,texts=0:76,color=2:78)
for(k in 1:9) {
lines3d(xa[g[[k]]],ya[g[[k]]],za[g[[k]]])
}
